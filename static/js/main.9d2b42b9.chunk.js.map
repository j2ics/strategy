{"version":3,"sources":["components/Car.js","components/DriversForm.js","assets/ROSTER.js","components/RaceDataForm.js","components/EditCar.js","App.js","serviceWorker.js","index.js"],"names":["Car","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateStints","e","setState","stints","target","value","checkCapacity","state","car","fuelCapacity","burnRate","race","laps","getRaceTime","_this$props$race","pitTime","_this$state$car","zeroFuelLaptime","weightCost","pitTimeLost","bareLaps","fuelWeightPenalty","lapsThisStint","l","parseInt","componentWillReceiveProps","console","log","driver","s","pad","n","z","arguments","length","undefined","slice","react_default","a","createElement","className","style","width","borderColor","liveryColor","driverName","makeModel","msToTime","htmlFor","textAlign","type","min","onChange","color","msToHTime","React","Component","DriversForm","numberOfCars","updateCars","submitForm","preventDefault","onSetCars","react","onSubmit","max","name","ROSTER","cars","RaceDataForm","changeLaps","changePitTime","updateRace","onUpdateRace","_this$state","EditCar","highFuel","lowFuel","handleSelectCar","JSON","parse","handleChangeLow","t","handleChangeHigh","setCar","onUpdateCar","objectSpread","roster","map","index","key","stringify","step","onClick","href","App","updateCar","c","prevState","newDriver","r","showDrivers","components_Car","driversReady","image","Faker","_","sample","components_RaceDataForm","components_EditCar","components_DriversForm","setCars","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d2b42b9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../assets/Car.css\";\r\n\r\nclass Car extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    console.log(props)\r\n    this.state = { car: props.driver, stints: 1 };\r\n  }\r\n  updateStints = e => {\r\n    this.setState({ stints: e.target.value });\r\n  };\r\n\r\n  checkCapacity = () => {\r\n    return (\r\n      this.state.car.fuelCapacity >=\r\n      this.state.car.burnRate * (this.props.race.laps / this.state.stints)\r\n    );\r\n  };\r\n\r\n  getRaceTime = () => {\r\n    const { pitTime, laps } = this.props.race;\r\n    const { fuelCapacity, zeroFuelLaptime, weightCost } = this.state.car;\r\n    const { stints } = this.state;\r\n    const pitTimeLost = (stints - 1) * pitTime;\r\n    const bareLaps = laps * zeroFuelLaptime;\r\n    let fuelWeightPenalty = 0;\r\n    const lapsThisStint = laps / stints;\r\n\r\n    for (let l = 0; l < lapsThisStint; l++) {\r\n      const lapsRemaining = lapsThisStint - l;\r\n      const fuelPenaltyThisLap = parseInt(lapsRemaining * weightCost);\r\n      fuelWeightPenalty = fuelWeightPenalty + fuelPenaltyThisLap;\r\n    }\r\n\r\n    const totalTime = pitTimeLost + bareLaps + fuelWeightPenalty;\r\n    return totalTime;\r\n  };\r\n  componentWillReceiveProps = props => {\r\n    console.log(props);\r\n    this.setState({ car: props.driver.car });\r\n  };\r\n  msToHTime(s) {\r\n    // Pad to 2 or 3 digits, default is 2\r\n    var pad = (n, z = 2) => (\"00\" + n).slice(-z);\r\n    return (\r\n      pad((s / 3.6e6) | 0) +\r\n      \" : \" +\r\n      pad(((s % 3.6e6) / 6e4) | 0) +\r\n      \" : \" +\r\n      pad(((s % 6e4) / 1000) | 0) +\r\n      \".\" +\r\n      pad(s % 1000, 3)\r\n    );\r\n  }\r\n  msToTime(s) {\r\n    // Pad to 2 or 3 digits, default is 2\r\n    var pad = (n, z = 2) => (\"00\" + n).slice(-z);\r\n    return (\r\n      pad(((s % 3.6e6) / 6e4) | 0) +\r\n      \":\" +\r\n      pad(((s % 6e4) / 1000) | 0) +\r\n      \".\" +\r\n      pad(s % 1000, 3)\r\n    );\r\n  }\r\n  render() {\r\n    const { car } = this.state.car;\r\n    return (\r\n      <div\r\n        className=\"card col-sm-8\"\r\n        style={{ width: \"18rem\", borderColor: car.liveryColor }}\r\n      >\r\n        <h5 className=\"card-title\">{car.driverName}</h5>\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-title\">Type: {car.makeModel}</h6>\r\n          <p>\r\n            Fuel Use: {car.burnRate} per lap - Maximum Fuel: {car.fuelCapacity}\r\n          </p>\r\n          <p className=\"card-title\">\r\n            Average Lap: {this.msToTime(this.props.driver.zeroFuelLaptime)}\r\n          </p>\r\n          <form>\r\n            <label htmlFor=\"stops\">How many stints?</label>\r\n            <br />\r\n            <input\r\n              style={{ textAlign: \"center\", width: \"70%\" }}\r\n              type=\"number\"\r\n              min=\"1\"\r\n              value={this.state.stints}\r\n              onChange={this.updateStints}\r\n            />\r\n            <hr />\r\n            <button className=\"btn btn-success\">Calculate Result</button>\r\n            <hr />\r\n          </form>\r\n          {this.checkCapacity() || this.state.stints <= 0 ? null : (\r\n            <h6 style={{ color: \"red\" }}>!! Insufficient Fuel Capacity !!</h6>\r\n          )}\r\n          <h5>\r\n            Estimated Time:{\" \"}\r\n            {this.state.stints >= 1 ? this.msToHTime(this.getRaceTime()) : null}\r\n          </h5>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Car;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nclass DriversForm extends Component {\r\n\r\n    state = {\r\n        numberOfCars: 1\r\n    }\r\n\r\n    updateCars = e => {\r\n        this.setState({numberOfCars: e.target.value})\r\n    }\r\n    submitForm = e => {\r\n        e.preventDefault();\r\n        this.props.onSetCars(this.state.numberOfCars)\r\n    }\r\n    render () {\r\n        return (\r\n            <Fragment>\r\n                <form onSubmit={this.submitForm}>\r\n                    <h2>How many cars to plan for?</h2>\r\n                    <label htmlFor=\"number-of-cars\">Number of Cars (max 9):</label>\r\n                    <input type=\"number\" max=\"9\" name=\"number-of-cars\" value={this.state.numberOfCars} onChange={this.updateCars}/>\r\n                    <button>Ready</button>\r\n                </form>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DriversForm\r\n","export default {\r\n  cars: [\r\n    { makeModel: \"BMW M6 GTLM\", fuelCapacity: 105 },\r\n    { makeModel: \"Ferrari 488 GTLM\", fuelCapacity: 105 },\r\n    { makeModel: \"Chevrolet Corvette GTLM\", fuelCapacity: 105 },\r\n    { makeModel: \"Ford GT Endurance\", fuelCapacity: 105 },\r\n    { makeModel: \"Aston Martin DB Vantage GTE\", fuelCapacity: 105 },\r\n    { makeModel: \"Porsche 911 GTE\", fuelCapacity: 105 }\r\n  ]\r\n};\r\n","import React from \"react\";\r\n\r\nclass RaceDataForm extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      laps: props.race.laps,\r\n      pitTime: props.race.pitTime/1000\r\n    };\r\n  }\r\n\r\n  changeLaps = e => {\r\n    this.setState({ laps: e.target.value });\r\n  };\r\n\r\n  changePitTime = e => {\r\n    this.setState({ pitTime: e.target.value });\r\n  };\r\n\r\n  updateRace = e => {\r\n    e.preventDefault();\r\n    this.props.onUpdateRace({\r\n        laps: this.state.laps,\r\n        pitTime: this.state.pitTime*1000\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { laps, pitTime } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.updateRace}>\r\n        <label>Laps</label>\r\n        <input type=\"number\" value={laps} onChange={this.changeLaps} />\r\n        <label>Pitlane Time (seconds) </label>\r\n        <input\r\n          type=\"number\"\r\n          value={pitTime}\r\n          onChange={this.changePitTime}\r\n        />\r\n        <button>Update</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RaceDataForm;\r\n","import React from \"react\";\r\n\r\nclass EditCar extends React.Component {\r\n  state = {\r\n    ...this.props.car,\r\n    highFuel: 0,\r\n    lowFuel: 0\r\n  };\r\n  handleSelectCar = e => {\r\n    console.log(e.target.value);\r\n    this.setState({ car: JSON.parse(e.target.value) });\r\n  };\r\n  handleChangeLow = t => {\r\n    this.setState({ lowFuel: t.target.value });\r\n  };\r\n  handleChangeHigh = t => {\r\n    this.setState({ highFuel: t.target.value });\r\n  };\r\n  setCar = () => {\r\n    this.props.onUpdateCar({ ...this.state });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"card card col-sm-4\">\r\n        <h5 className=\"card-title\">Edit Car Data</h5>\r\n        <div className=\"card-body\">\r\n          <label>Select Car</label>\r\n          <select style={{ width: \"85%\" }} onChange={this.handleSelectCar}>\r\n            {this.props.roster.map((car, index) => {\r\n            //   console.log(car);\r\n              return (\r\n                <option key={index} value={JSON.stringify(car)}>\r\n                  {car.makeModel}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n          <hr />\r\n          <div className=\"container\">\r\n            <h3>Fuel Calculation</h3>\r\n            <label>Low Fuel Lap (Start w/ 10 liters):</label>\r\n            <input\r\n              style={{ width: \"95%\", textAlign: \"center\" }}\r\n              type=\"number\"\r\n              step=\".001\"\r\n              min=\"0\"\r\n              value={this.state.lowFuel}\r\n              onChange={this.handleChangeLow}\r\n            />\r\n            <label>High Fuel Lap (Start w/ max fuel):</label>\r\n            <input\r\n              style={{ width: \"95%\", textAlign: \"center\" }}\r\n              type=\"number\"\r\n              step=\".001\"\r\n              min=\"0\"\r\n              value={this.state.highFuel}\r\n              onChange={this.handleChangeHigh}\r\n            />\r\n          </div>\r\n          <hr />\r\n          <a onClick={this.setCar} href=\"#\" className=\"btn btn-warning\">\r\n            Update Car\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditCar;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Car from \"./components/Car\";\r\nimport DriversForm from \"./components/DriversForm\";\r\nimport ROSTER from \"./assets/ROSTER\";\r\nimport _ from \"lodash\";\r\nimport Faker from \"faker\";\r\nimport RaceDataForm from \"./components/RaceDataForm\";\r\nimport EditCar from \"./components/EditCar\";\r\nimport { throwStatement } from \"@babel/types\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // driversReady: false,\r\n      driversReady: true,\r\n      // drivers: [],\r\n      driver: {\r\n        fuelCapacity: 105,\r\n        zeroFuelLaptime: 62376,\r\n        driverName: `Kima Kahhinen`,\r\n        image: Faker.image.image(),\r\n        weightCost: 30,\r\n        burnRate: 2.35,\r\n        car: _.sample(ROSTER.cars),\r\n        liveryColor: _.sample([\r\n          \"blue\",\r\n          \"red\",\r\n          \"silver\",\r\n          \"grey\",\r\n          \"green\",\r\n          \"orange\",\r\n          \"purple\"\r\n        ])\r\n      },\r\n      race: { laps: 55, pitTime: 22000 }\r\n    };\r\n  }\r\n\r\n  updateCar = c => {\r\n    console.log(c)\r\n    this.setState(prevState=> {\r\n      let newDriver = prevState.driver;\r\n      newDriver.car = c;\r\n      return {driver: newDriver}\r\n    });\r\n  };\r\n\r\n  updateRace = r => {\r\n    console.log(\"updating race\", r);\r\n    this.setState({ race: r });\r\n  };\r\n\r\n  showDrivers = () => {\r\n    // return this.state.cars.map((driver, index) => {\r\n    return <Car driver={this.state.driver} race={this.state.race} />;\r\n    // });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Race Strategy App</h1>\r\n        <RaceDataForm race={this.state.race} onUpdateRace={this.updateRace} />\r\n        <div>\r\n          {this.state.driversReady ? (\r\n            <div className=\"container\">\r\n              {/* <p>Click on Driver to Edit</p> */}\r\n              <div className=\"row\">\r\n                <EditCar\r\n                  onUpdateCar={this.updateCar}\r\n                  roster={ROSTER.cars}\r\n                  car={this.state.driver.car}\r\n                />\r\n                {this.showDrivers()}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <DriversForm onSetCars={this.setCars} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}