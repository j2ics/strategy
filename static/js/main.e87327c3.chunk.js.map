{"version":3,"sources":["components/Car.js","assets/roster.js","components/DriversForm.js","components/RaceDataForm.js","components/EditCar.js","App.js","serviceWorker.js","index.js"],"names":["Car","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateStints","e","setState","stints","target","value","checkCapacity","state","driver","fuelCapacity","burnRate","race","laps","getRaceTime","_this$props$race","pitTime","_this$state$driver","zeroFuelLaptime","weightCost","car","pitTimeLost","bareLaps","fuelWeightPenalty","lapsThisStint","l","parseInt","componentWillReceiveProps","s","pad","n","z","arguments","length","undefined","slice","react_default","a","createElement","className","style","width","borderColor","liveryColor","driverName","makeModel","msToTime","htmlFor","textAlign","type","min","onChange","color","msToHTime","React","Component","roster","cars","RaceDataForm","changeLaps","changePitTime","updateRace","preventDefault","onUpdateRace","_this$state","onSubmit","EditCar","highFuel","lowFuel","handleSelectCar","assign","JSON","parse","handleChangeLow","t","calcWeightCost","handleChangeHigh","setCar","onUpdateDriver","_objectSpread","console","log","v","endCost","toFixed","prevState","updateBurnRate","newRate","getMaxLaps","Math","floor","map","index","key","stringify","Fragment","step","onClick","href","App","updateDriver","d","driversReady","r","showDrivers","components_Car","image","Faker","_","sample","components_RaceDataForm","components_EditCar","ROSTER","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e87327c3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../assets/Car.css\";\r\n\r\nclass Car extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = { driver: props.driver, stints: 1 };\r\n  }\r\n  updateStints = e => {\r\n    this.setState({ stints: e.target.value });\r\n  };\r\n\r\n  checkCapacity = () => {\r\n    return (\r\n      this.state.driver.fuelCapacity >=\r\n      this.state.driver.burnRate * (this.props.race.laps / this.state.stints)\r\n    );\r\n  };\r\n\r\n  getRaceTime = () => {\r\n    const { pitTime, laps } = this.props.race;\r\n    const { zeroFuelLaptime, weightCost } = this.state.driver;\r\n    const { fuelCapacity } = this.state.driver.car;\r\n    const { stints } = this.state;\r\n    const pitTimeLost = (stints - 1) * pitTime;\r\n    const bareLaps = laps * zeroFuelLaptime;\r\n    let fuelWeightPenalty = 0;\r\n    const lapsThisStint = laps / stints;\r\n\r\n    for (let l = 0; l < lapsThisStint; l++) {\r\n      const lapsRemaining = lapsThisStint - l;\r\n      const fuelPenaltyThisLap = parseInt(lapsRemaining * weightCost);\r\n      fuelWeightPenalty = fuelWeightPenalty + fuelPenaltyThisLap;\r\n    }\r\n\r\n    const totalTime = pitTimeLost + bareLaps + fuelWeightPenalty;\r\n    return totalTime;\r\n  };\r\n  componentWillReceiveProps = props => {\r\n    this.setState({ driver: props.driver });\r\n  };\r\n  msToHTime(s) {\r\n    // Pad to 2 or 3 digits, default is 2\r\n    var pad = (n, z = 2) => (\"00\" + n).slice(-z);\r\n    return (\r\n      pad((s / 3.6e6) | 0) +\r\n      \" : \" +\r\n      pad(((s % 3.6e6) / 6e4) | 0) +\r\n      \" : \" +\r\n      pad(((s % 6e4) / 1000) | 0) +\r\n      \".\" +\r\n      pad(s % 1000, 3)\r\n    );\r\n  }\r\n  msToTime(s) {\r\n    // Pad to 2 or 3 digits, default is 2\r\n    var pad = (n, z = 2) => (\"00\" + n).slice(-z);\r\n    return (\r\n      pad(((s % 3.6e6) / 6e4) | 0) +\r\n      \":\" +\r\n      pad(((s % 6e4) / 1000) | 0) +\r\n      \".\" +\r\n      pad(s % 1000, 3)\r\n    );\r\n  }\r\n  render() {\r\n    const { driver } = this.state;\r\n    return (\r\n      <div\r\n        className=\"card col-sm-12\"\r\n        style={{ width: \"18rem\", borderColor: driver.liveryColor }}\r\n      >\r\n        <h5 className=\"card-title\">{driver.driverName}</h5>\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-title\">Type: {driver.car.makeModel}</h6>\r\n          <p>\r\n            Fuel Use: {driver.burnRate} per lap - Maximum Fuel:{\" \"}\r\n            {driver.car.fuelCapacity}\r\n          </p>\r\n          <p className=\"card-title\">\r\n            Average Lap: {this.msToTime(driver.zeroFuelLaptime)}\r\n          </p>\r\n          <form>\r\n            <label htmlFor=\"stops\">How many stints?</label>\r\n            <br />\r\n            <input\r\n              style={{ textAlign: \"center\", width: \"70%\" }}\r\n              type=\"number\"\r\n              min=\"1\"\r\n              value={this.state.stints}\r\n              onChange={this.updateStints}\r\n            />\r\n            <hr />\r\n            <button className=\"btn btn-success\">Start Over</button>\r\n            <hr />\r\n          </form>\r\n          {this.checkCapacity() || this.state.stints <= 0 ? null : (\r\n            <h6 style={{ color: \"red\" }}>!! Insufficient Fuel Capacity !!</h6>\r\n          )}\r\n          <h5>\r\n            Estimated Time:{\" \"}\r\n            {this.state.stints >= 1 ? this.msToHTime(this.getRaceTime()) : null}\r\n          </h5>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Car;\r\n","export default {\r\n  cars: [\r\n    { makeModel: \"BMW M6 GTLM\", fuelCapacity: 105 },\r\n    { makeModel: \"Ferrari 488 GTLM\", fuelCapacity: 84 },\r\n    { makeModel: \"Chevrolet Corvette GTLM\", fuelCapacity: 105 },\r\n    { makeModel: \"Ford GT Endurance\", fuelCapacity: 105 },\r\n    { makeModel: \"Aston Martin DB Vantage GTE\", fuelCapacity: 105 },\r\n    { makeModel: \"Porsche 911 GTE\", fuelCapacity: 105 }\r\n  ]\r\n};\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nclass DriversForm extends Component {\r\n\r\n    state = {\r\n        numberOfCars: 1\r\n    }\r\n\r\n    updateCars = e => {\r\n        this.setState({numberOfCars: e.target.value})\r\n    }\r\n    submitForm = e => {\r\n        e.preventDefault();\r\n        this.props.onSetCars(this.state.numberOfCars)\r\n    }\r\n    render () {\r\n        return (\r\n            <Fragment>\r\n                <form onSubmit={this.submitForm}>\r\n                    <h2>How many cars to plan for?</h2>\r\n                    <label htmlFor=\"number-of-cars\">Number of Cars (max 9):</label>\r\n                    <input type=\"number\" max=\"9\" name=\"number-of-cars\" value={this.state.numberOfCars} onChange={this.updateCars}/>\r\n                    <button>Ready</button>\r\n                </form>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DriversForm\r\n","import React from \"react\";\r\n\r\nclass RaceDataForm extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      laps: props.race.laps,\r\n      pitTime: props.race.pitTime/1000\r\n    };\r\n  }\r\n\r\n  changeLaps = e => {\r\n    this.setState({ laps: e.target.value });\r\n  };\r\n\r\n  changePitTime = e => {\r\n    this.setState({ pitTime: e.target.value });\r\n  };\r\n\r\n  updateRace = e => {\r\n    e.preventDefault();\r\n    this.props.onUpdateRace({\r\n        laps: this.state.laps,\r\n        pitTime: this.state.pitTime*1000\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { laps, pitTime } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.updateRace}>\r\n        <label>Laps</label>\r\n        <input type=\"number\" value={laps} onChange={this.changeLaps} />\r\n        <label>AVG Pitlane Time (seconds) </label>\r\n        <input\r\n          type=\"number\"\r\n          value={pitTime}\r\n          onChange={this.changePitTime}\r\n        />\r\n        <button>Update</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RaceDataForm;\r\n","import React from \"react\";\r\n\r\nclass EditCar extends React.Component {\r\n  state = {\r\n    driver: this.props.driver,\r\n    highFuel: 0,\r\n    lowFuel: this.props.driver.zeroFuelLaptime/1000\r\n  };\r\n  handleSelectCar = e => {\r\n    this.setState({\r\n      driver: Object.assign({}, this.state.driver, {\r\n        car: JSON.parse(e.target.value)\r\n      })\r\n    });\r\n  };\r\n  handleChangeLow = t => {\r\n    this.setState({ lowFuel: t.target.value }, this.calcWeightCost);\r\n  };\r\n  handleChangeHigh = t => {\r\n    this.setState({ highFuel: t.target.value }, this.calcWeightCost);\r\n  };\r\n  setCar = () => {\r\n    this.props.onUpdateDriver(\r\n      Object.assign(\r\n        {},\r\n        { ...this.state.driver },\r\n        { zeroFuelLaptime: this.state.lowFuel * 1000 }\r\n      )\r\n    );\r\n  };\r\n  calcWeightCost = () => {\r\n    console.log(\"costcalc\");\r\n    const { highFuel, lowFuel } = this.state;\r\n    const literWeight = v => v * 0.75;\r\n    const lapDelta = (highFuel - lowFuel) * 1000;\r\n    const endCost = (\r\n      lapDelta / literWeight(this.state.driver.fuelCapacity)\r\n    ).toFixed(3);\r\n    this.setState(prevState => {\r\n      return {\r\n        driver: Object.assign({}, prevState.driver, { weightCost: endCost })\r\n      };\r\n    });\r\n  };\r\n\r\n  updateBurnRate = e => {\r\n    const newRate = e.target.value;\r\n    this.setState(prevState => {\r\n      return {\r\n        driver: Object.assign({}, prevState.driver, {\r\n          burnRate: newRate\r\n        })\r\n      };\r\n    });\r\n  };\r\n\r\n  getMaxLaps = () => {\r\n    const { fuelCapacity, burnRate } = this.state.driver;\r\n    return Math.floor(fuelCapacity / burnRate);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card card col-sm-12\">\r\n        <h5 className=\"card-title\">Enter Car Testing Data</h5>\r\n        <div className=\"card-body\">\r\n          <label>Select Car</label>\r\n          <select style={{ width: \"85%\" }} onChange={this.handleSelectCar}>\r\n            {this.props.roster.map((car, index) => {\r\n              return (\r\n                <option key={index} value={JSON.stringify(car)}>\r\n                  {car.makeModel}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n          <h6>{this.state.driver.car.fuelCapacity} liters of fuel</h6>\r\n          <hr />\r\n          <div className=\"row\">\r\n            <div className=\"card card col-sm-6\">\r\n              <h3>Fuel Calculation</h3>\r\n              <h4 style={{ color: \"blue\" }}>\r\n                Current Fuel Rate:{\" \"}\r\n                {(this.state.driver.weightCost / 1000).toFixed(3)}{\" \"}\r\n                seconds/lap/kg\r\n              </h4>\r\n              {this.state.driver.weightCost > 45 && (\r\n                <React.Fragment>\r\n                  <h6 style={{ color: \"red\" }}>\r\n                    This is a HIGH fuel-weight impact.\r\n                  </h6>\r\n                  <h6 style={{ color: \"maroon\" }}>\r\n                    Only accept this value if you are setting consistant\r\n                    laptimes\r\n                  </h6>\r\n                </React.Fragment>\r\n              )}\r\n              <p>Enter times in seconds, (ie. 64.395)</p>\r\n              <div\r\n                className=\"form-group\"\r\n                style={{ width: \"95%\", textAlign: \"center\" }}\r\n              >\r\n                <label>Low Fuel Laptime (Start w/ 10 liters):</label>\r\n                <input\r\n                  type=\"number\"\r\n                  step=\".001\"\r\n                  min=\"0\"\r\n                  value={this.state.lowFuel}\r\n                  onChange={this.handleChangeLow}\r\n                />\r\n              </div>\r\n              <div\r\n                className=\"form-group\"\r\n                style={{ width: \"95%\", textAlign: \"center\" }}\r\n              >\r\n                <label>High Fuel Laptime (Start w/ max fuel):</label>\r\n                <input\r\n                  type=\"number\"\r\n                  step=\".001\"\r\n                  min=\"0\"\r\n                  value={this.state.highFuel}\r\n                  onChange={this.handleChangeHigh}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"card card col-sm-6\">\r\n              <h3>Lap Information</h3>\r\n              <h5>Current Best Laptime = {this.state.lowFuel}</h5>\r\n              <div\r\n                className=\"form-group\"\r\n                style={{ width: \"95%\", textAlign: \"center\" }}\r\n              >\r\n                <label>Observed Fuel Consumption</label>\r\n                <input\r\n                  type=\"number\"\r\n                  step=\".01\"\r\n                  value={this.state.driver.burnRate}\r\n                  onChange={this.updateBurnRate}\r\n                />\r\n              </div>\r\n              <h6>Max laps on full tank: {this.getMaxLaps()}</h6>\r\n              <h6 style={{color:\"maroon\"}}>\r\n                A full tank will slow you by {((this.state.driver.weightCost * this.state.driver.fuelCapacity)/1000).toFixed(3)} seconds\r\n              </h6>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <button\r\n            onClick={this.setCar}\r\n            href=\"#\"\r\n            className=\"btn btn-warning\"\r\n          >\r\n            Plan Stints\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditCar;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Car from \"./components/Car\";\r\nimport DriversForm from \"./components/DriversForm\";\r\nimport ROSTER from \"./assets/roster\";\r\nimport _ from \"lodash\";\r\nimport Faker from \"faker\";\r\nimport RaceDataForm from \"./components/RaceDataForm\";\r\nimport EditCar from \"./components/EditCar\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // driversReady: false,\r\n      driversReady: false,\r\n      // drivers: [],\r\n      driver: {\r\n        fuelCapacity: 105,\r\n        zeroFuelLaptime: 62376,\r\n        driverName: `Default Driver`,\r\n        image: Faker.image.image(),\r\n        weightCost: 30,\r\n        burnRate: 2.35,\r\n        car: { makeModel: \"BMW M6 GTLM\", fuelCapacity: 105 },\r\n        liveryColor: _.sample([\r\n          \"blue\",\r\n          \"red\",\r\n          \"silver\",\r\n          \"grey\",\r\n          \"green\",\r\n          \"orange\",\r\n          \"purple\"\r\n        ])\r\n      },\r\n      race: { laps: 55, pitTime: 22000 }\r\n    };\r\n  }\r\n\r\n  updateDriver = d => {\r\n    this.setState(prevState => {\r\n      return {\r\n        driversReady: true,\r\n        driver: d\r\n      };\r\n    });\r\n  };\r\n\r\n  updateRace = r => {\r\n    this.setState({ race: r });\r\n  };\r\n\r\n  showDrivers = () => {\r\n    // return this.state.cars.map((driver, index) => {\r\n    return <Car driver={this.state.driver} race={this.state.race} />;\r\n    // });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App jumbotron\">\r\n        <h1>Race Strategy App</h1>\r\n        <RaceDataForm race={this.state.race} onUpdateRace={this.updateRace} />\r\n        <div>\r\n          <div className=\"container\">\r\n            {/* <p>Click on Driver to Edit</p> */}\r\n            <div className=\"row\">\r\n              {this.state.driversReady == false ? (\r\n                <EditCar\r\n                  onUpdateDriver={this.updateDriver}\r\n                  roster={ROSTER.cars}\r\n                  driver={this.state.driver}\r\n                  // race={this.state.race}\r\n                />\r\n              ) : (\r\n                this.showDrivers()\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}