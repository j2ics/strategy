{"version":3,"sources":["components/Car.js","assets/roster.js","components/DriversForm.js","components/RaceDataForm.js","components/EditCar.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Car","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateStints","e","setState","stints","target","value","checkCapacity","state","driver","car","fuelCapacity","burnRate","race","laps","getRaceTime","_this$props$race","pitTime","_this$state$driver","zeroFuelLaptime","weightCost","pitTimeLost","bareLaps","fuelWeightPenalty","lapsThisStint","l","parseInt","totalTime","componentWillReceiveProps","s","pad","n","z","arguments","length","undefined","slice","react_default","a","createElement","className","style","width","borderColor","liveryColor","driverName","makeModel","msToTime","htmlFor","textAlign","type","min","onChange","color","Math","ceil","msToHTime","React","Component","roster","cars","RaceDataForm","changeLaps","changePitTime","updateRace","preventDefault","onUpdateRace","_this$state","onSubmit","EditCar","highFuel","lowFuel","enterFuelAmount","newFuel","prevState","newCar","assign","_objectSpread","handleSelectCar","JSON","parse","computeMaxLaps","handleChangeLow","t","calcWeightCost","handleChangeHigh","setCar","onUpdateDriver","console","log","v","endCost","toFixed","updateBurnRate","newRate","map","index","key","stringify","Fragment","step","floor","onClick","href","Info","App","updateDriver","d","driversReady","r","showDrivers","components_Car","image","Faker","_","sample","components_RaceDataForm","react","components_EditCar","ROSTER","Info_Info","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d4d0185.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../assets/Car.css\";\n\nclass Car extends React.Component {\n  constructor(props) {\n    super();\n    this.state = { driver: props.driver, stints: 1 };\n  }\n  updateStints = e => {\n    this.setState({ stints: e.target.value });\n  };\n\n  checkCapacity = () => {\n    return (\n      this.state.driver.car.fuelCapacity >=\n      this.state.driver.burnRate * (this.props.race.laps / this.state.stints)\n    );\n  };\n\n  getRaceTime = () => {\n    const { pitTime, laps } = this.props.race;\n    const { zeroFuelLaptime, weightCost } = this.state.driver;\n    const { stints } = this.state;\n    const pitTimeLost = (stints - 1) * pitTime;\n    const bareLaps = laps * zeroFuelLaptime;\n    let fuelWeightPenalty = 0;\n    const lapsThisStint = laps / stints;\n\n    for (let l = 0; l < lapsThisStint; l++) {\n      const lapsRemaining = lapsThisStint - l;\n      const fuelPenaltyThisLap = parseInt(lapsRemaining * weightCost);\n      fuelWeightPenalty = fuelWeightPenalty + fuelPenaltyThisLap;\n    }\n\n    const totalTime = pitTimeLost + bareLaps + fuelWeightPenalty;\n\n    return { totalTime, fuelWeightPenalty };\n  };\n  componentWillReceiveProps = props => {\n    this.setState({ driver: props.driver });\n  };\n  msToHTime(s) {\n    // Pad to 2 or 3 digits, default is 2\n    var pad = (n, z = 2) => (\"00\" + n).slice(-z);\n    return (\n      pad((s / 3.6e6) | 0) +\n      \" : \" +\n      pad(((s % 3.6e6) / 6e4) | 0) +\n      \" : \" +\n      pad(((s % 6e4) / 1000) | 0) +\n      \".\" +\n      pad(s % 1000, 3)\n    );\n  }\n  msToTime(s) {\n    // Pad to 2 or 3 digits, default is 2\n    var pad = (n, z = 2) => (\"00\" + n).slice(-z);\n    return (\n      pad(((s % 3.6e6) / 6e4) | 0) +\n      \":\" +\n      pad(((s % 6e4) / 1000) | 0) +\n      \".\" +\n      pad(s % 1000, 3)\n    );\n  }\n  render() {\n    const { driver } = this.state;\n    return (\n      <div\n        className=\"card col-sm-12\"\n        style={{ width: \"18rem\", borderColor: driver.liveryColor }}\n      >\n        <h5 className=\"card-title\">{driver.driverName}</h5>\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">Type: {driver.car.makeModel}</h6>\n          <p>\n            Fuel Use: {driver.burnRate} per lap - Maximum Fuel:{\" \"}\n            {driver.car.fuelCapacity}\n          </p>\n          <p className=\"card-title\">\n            Average Lap: {this.msToTime(driver.zeroFuelLaptime)}\n          </p>\n          <form>\n            <label htmlFor=\"stops\">How many stints?</label>\n            <br />\n            <input\n              style={{ textAlign: \"center\", width: \"70%\" }}\n              type=\"number\"\n              min=\"1\"\n              value={this.state.stints}\n              onChange={this.updateStints}\n            />\n            <hr />\n            <button className=\"btn btn-success\">Start Over</button>\n            <hr />\n          </form>\n          {this.checkCapacity() || this.state.stints <= 0 ? (\n            <h4 style={{ color: \"green\" }}>\n              Load{\" \"}\n              {Math.ceil(\n                (this.props.race.laps / this.state.stints) *\n                  this.state.driver.burnRate\n              )}{\" \"}\n              liters of fuel per stint\n            </h4>\n          ) : (\n            <h3 style={{ color: \"red\" }}>\n              !! Insufficient Fuel Capacity !!\n            </h3>\n          )}\n          <h3>\n            Estimated Time:{\" \"}\n            {this.state.stints >= 1\n              ? this.msToHTime(this.getRaceTime().totalTime)\n              : null}\n          </h3>\n          <h6>\n            Total Time Lost To Fuel Weight:{\" \"}\n            {this.state.stints >= 1\n              ? this.msToHTime(\n                  this.getRaceTime().fuelWeightPenalty * this.state.stints\n                )\n              : null}\n          </h6>\n          <h6>\n            Total Time Lost To Pit Stops:{\" \"}\n            {this.state.stints >= 1\n              ? this.msToHTime(\n                  (this.state.stints-1)*this.props.race.pitTime\n                )\n              : null}\n          </h6>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Car;\n","export default {\n  cars: [\n    { makeModel: \"BMW M6 GTLM\", fuelCapacity: 105 },\n    { makeModel: \"Ferrari 488 GTLM\", fuelCapacity: 84 },\n    { makeModel: \"Chevrolet Corvette GTLM\", fuelCapacity: 105 },\n    { makeModel: \"Ford GT Endurance\", fuelCapacity: 105 },\n    { makeModel: \"Aston Martin DB Vantage GTE\", fuelCapacity: 105 },\n    { makeModel: \"Porsche 911 GTE\", fuelCapacity: 95 },\n    { makeModel: \"...Other\", fuelCapacity: 0 }\n  ]\n};\n","import React, { Component, Fragment } from \"react\";\n\nclass DriversForm extends Component {\n\n    state = {\n        numberOfCars: 1\n    }\n\n    updateCars = e => {\n        this.setState({numberOfCars: e.target.value})\n    }\n    submitForm = e => {\n        e.preventDefault();\n        this.props.onSetCars(this.state.numberOfCars)\n    }\n    render () {\n        return (\n            <Fragment>\n                <form onSubmit={this.submitForm}>\n                    <h2>How many cars to plan for?</h2>\n                    <label htmlFor=\"number-of-cars\">Number of Cars (max 9):</label>\n                    <input type=\"number\" max=\"9\" name=\"number-of-cars\" value={this.state.numberOfCars} onChange={this.updateCars}/>\n                    <button>Ready</button>\n                </form>\n            </Fragment>\n        )\n    }\n}\n\nexport default DriversForm\n","import React from \"react\";\n\nclass RaceDataForm extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      laps: props.race.laps,\n      pitTime: props.race.pitTime/1000\n    };\n  }\n\n  changeLaps = e => {\n    this.setState({ laps: e.target.value });\n  };\n\n  changePitTime = e => {\n    this.setState({ pitTime: e.target.value });\n  };\n\n  updateRace = e => {\n    e.preventDefault();\n    this.props.onUpdateRace({\n        laps: this.state.laps,\n        pitTime: this.state.pitTime*1000\n    });\n  };\n\n  render() {\n    const { laps, pitTime } = this.state;\n\n    return (\n      <form onSubmit={this.updateRace}>\n        <label>Laps</label>\n        <input type=\"number\" value={laps} onChange={this.changeLaps} />\n        <label>AVG Pitlane Time (seconds) </label>\n        <input\n          type=\"number\"\n          value={pitTime}\n          onChange={this.changePitTime}\n        />\n        <button>Update</button>\n      </form>\n    );\n  }\n}\n\nexport default RaceDataForm;\n","import React from \"react\";\n\nclass EditCar extends React.Component {\n  state = {\n    driver: this.props.driver,\n    highFuel: 0,\n    lowFuel: this.props.driver.zeroFuelLaptime / 1000\n  };\n  enterFuelAmount = e => {\n    const newFuel = e.target.value;\n    this.setState(prevState => {\n      const newCar = Object.assign(\n        { ...prevState.driver.car },\n        { fuelCapacity: newFuel }\n      );\n      return { driver: Object.assign({}, prevState.driver, { car: newCar }) };\n    });\n  };\n  handleSelectCar = e => {\n    this.setState(\n      {\n        driver: Object.assign({}, this.state.driver, {\n          car: JSON.parse(e.target.value)\n        })\n      },\n      this.computeMaxLaps\n    );\n  };\n  handleChangeLow = t => {\n    this.setState({ lowFuel: t.target.value }, this.calcWeightCost);\n  };\n  handleChangeHigh = t => {\n    this.setState({ highFuel: t.target.value }, this.calcWeightCost);\n  };\n  setCar = () => {\n    this.props.onUpdateDriver(\n      Object.assign(\n        {},\n        { ...this.state.driver },\n        { zeroFuelLaptime: this.state.lowFuel * 1000 }\n      )\n    );\n  };\n  calcWeightCost = () => {\n    const { highFuel, lowFuel } = this.state;\n    console.log(highFuel, lowFuel);\n    const literWeight = v => v * 0.75;\n    const lapDelta = (highFuel - lowFuel) * 1000;\n    const endCost = (\n      lapDelta / literWeight(this.state.driver.car.fuelCapacity)\n    ).toFixed(3);\n    this.setState(prevState => {\n      return {\n        driver: Object.assign({}, prevState.driver, { weightCost: endCost })\n      };\n    });\n  };\n\n  updateBurnRate = e => {\n    const newRate = e.target.value;\n    this.setState(prevState => {\n      return {\n        driver: Object.assign({}, prevState.driver, {\n          burnRate: newRate\n        })\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"card card col-sm-12\">\n        <h5 className=\"card-title\">Enter Car Testing Data</h5>\n        <div className=\"card-body\">\n          <label>Select Car</label>\n          <select style={{ width: \"85%\" }} onChange={this.handleSelectCar}>\n            {this.props.roster.map((car, index) => {\n              return (\n                <option key={index} value={JSON.stringify(car)}>\n                  {car.makeModel}\n                </option>\n              );\n            })}\n          </select>\n          {this.state.driver.car.makeModel === \"...Other\" && (\n            <React.Fragment>\n              <div className=\"form-group\">\n                <label>Manual Fuel Capacity</label>\n                <input\n                  type=\"number\"\n                  step=\"1\"\n                  value={this.state.driver.car.fuelCapacity}\n                  onChange={this.enterFuelAmount}\n                />\n              </div>\n            </React.Fragment>\n          )}\n          <h6>{this.state.driver.car.fuelCapacity} liters of fuel</h6>\n          <hr />\n          <div className=\"row\">\n            <div className=\"card card col-sm-6\">\n              <h3>Fuel Calculation</h3>\n              <h4 style={{ color: \"blue\" }}>\n                Current Fuel Rate:{\" \"}\n                {(this.state.driver.weightCost / 1000).toFixed(3)}{\" \"}\n                seconds/lap/kg\n              </h4>\n              {this.state.driver.weightCost > 45 && (\n                <React.Fragment>\n                  <h6 style={{ color: \"red\" }}>\n                    This is a HIGH fuel-weight impact.\n                  </h6>\n                  <h6 style={{ color: \"maroon\" }}>\n                    Only accept this value if you are setting consistant\n                    laptimes\n                  </h6>\n                </React.Fragment>\n              )}\n              <p>Enter times in seconds, (ie. 64.395)</p>\n              <div\n                className=\"form-group\"\n                style={{ width: \"95%\", textAlign: \"center\" }}\n              >\n                <label>Low Fuel Laptime (Start w/ 10 liters):</label>\n                <input\n                  type=\"number\"\n                  step=\".001\"\n                  min=\"0\"\n                  value={this.state.lowFuel}\n                  onChange={this.handleChangeLow}\n                />\n              </div>\n              <div\n                className=\"form-group\"\n                style={{ width: \"95%\", textAlign: \"center\" }}\n              >\n                <label>High Fuel Laptime (Start w/ max fuel):</label>\n                <input\n                  type=\"number\"\n                  step=\".001\"\n                  min=\"0\"\n                  value={this.state.highFuel}\n                  onChange={this.handleChangeHigh}\n                />\n              </div>\n            </div>\n            <div className=\"card card col-sm-6\">\n              <h3>Lap Information</h3>\n              <h5>Current Best Laptime = {this.state.lowFuel}</h5>\n              <div\n                className=\"form-group\"\n                style={{ width: \"95%\", textAlign: \"center\" }}\n              >\n                <label>Observed Fuel Consumption</label>\n                <input\n                  type=\"number\"\n                  step=\".01\"\n                  value={this.state.driver.burnRate}\n                  onChange={this.updateBurnRate}\n                />\n              </div>\n              <h6>\n                Max laps on full tank:{\" \"}\n                {Math.floor(\n                  this.state.driver.car.fuelCapacity /\n                    this.state.driver.burnRate\n                )}\n              </h6>\n              <h6 style={{ color: \"maroon\" }}>\n                A full tank will slow you by{\" \"}\n                {(\n                  (this.state.driver.weightCost *\n                    this.state.driver.car.fuelCapacity) /\n                  1000\n                ).toFixed(3)}{\" \"}\n                seconds\n              </h6>\n            </div>\n          </div>\n          <hr />\n          <button onClick={this.setCar} href=\"#\" className=\"btn btn-warning\">\n            Plan Stints\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditCar;\n","import React from \"react\";\n\nexport const Info = () => {\n  return (\n    <div className=\"container\" style={{textAlign: \"left\"}}>\n      <h4>How to use this app:</h4>\n      <p>\n        To use this app, you'll need to set aside some testing time. It is\n        designed to give you a chance to plan an ideal race strategy for YOUR\n        specific driving characteristics.{\" \"}\n      </p>\n      <p>Follow these steps to plan your race during testing:</p>\n      <ol>\n        <li>Select a car, or choose \"Other\" and enter your fuel capacity</li>\n        <li>\n          Add 10 liters of fuel, and run several laps. Enter your best time in\n          seconds under \"Low Fuel Laptime\"\n        </li>\n        <li>\n          Completely fill your fuel tank and run several more laps. Enter your\n          best time in seconds under \"High Fuel Laptime\"\n        </li>\n      </ol>\n\n      <p>\n        We'll need two more pieces of information, which can be gathered at any\n        time in testing or practice.\n      </p>\n\n      <ul>\n        <li>\n          Use your MOTEC display in-car to evaluate how many liters of fuel you\n          use per lap, and enter this value in \"Observed Fuel Consumption\"\n        </li>\n        <li>\n          We need to know how long a race-accurate pit stop will take for the\n          chosen track.\n          <ul>\n            <li>You can time this any way you like</li>\n            <li>\n              NOTE: The most accurate way to do this is to run two laps, with a\n              pit stop in between, then subtract two normal laps from their\n              combined time. This Delta is the pit stop time\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>\n        At this point, we have a valid picture of your pace and fuel usage.\n        Click \"Plan Stints\" to move on.\n      </p>\n\n      <ol>\n        <li>Enter the number of laps in the header</li>\n        <li>If you have not computed your pit stop time, do so now (don't forget to time a stop with fuel/tires/whatever combination you'll need</li>\n      </ol>\n\n      <p>You can now start to increase or decrease the number of stints you may try. Look for the lowest possible total \"Estimated Time\" which allows for you fuel capacity.</p>\n    </div>\n  );\n};\n","import React, {Fragment} from \"react\";\nimport \"./App.css\";\nimport Car from \"./components/Car\";\nimport DriversForm from \"./components/DriversForm\";\nimport ROSTER from \"./assets/roster\";\nimport _ from \"lodash\";\nimport Faker from \"faker\";\nimport RaceDataForm from \"./components/RaceDataForm\";\nimport EditCar from \"./components/EditCar\";\nimport {Info} from './components/Info'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      // driversReady: false,\n      driversReady: false,\n      // drivers: [],\n      driver: {\n        zeroFuelLaptime: 62376,\n        driverName: `Default Driver`,\n        image: Faker.image.image(),\n        weightCost: 30,\n        burnRate: 2.35,\n        car: { makeModel: \"BMW M6 GTLM\", fuelCapacity: 105 },\n        liveryColor: _.sample([\n          \"blue\",\n          \"red\",\n          \"silver\",\n          \"grey\",\n          \"green\",\n          \"orange\",\n          \"purple\"\n        ])\n      },\n      race: { laps: 55, pitTime: 22000 }\n    };\n  }\n\n  updateDriver = d => {\n    this.setState(prevState => {\n      return {\n        driversReady: true,\n        driver: d\n      };\n    });\n  };\n\n  updateRace = r => {\n    this.setState({ race: r });\n  };\n\n  showDrivers = () => {\n    // return this.state.cars.map((driver, index) => {\n    return <Car driver={this.state.driver} race={this.state.race} />;\n    // });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Race Strategy App</h1>\n        <RaceDataForm race={this.state.race} onUpdateRace={this.updateRace} />\n        <div className=\"jumbotron\">\n          <div className=\"container\">\n            {/* <p>Click on Driver to Edit</p> */}\n            <div className=\"row\">\n              {this.state.driversReady == false ? (\n                <Fragment>\n                <EditCar\n                  onUpdateDriver={this.updateDriver}\n                  roster={ROSTER.cars}\n                  driver={this.state.driver}\n                  // race={this.state.race}\n                  />\n                  </Fragment>\n              ) : (\n                this.showDrivers()\n                // <h2>WHoops</h2>\n              )}\n            </div>\n          </div>\n        </div>\n        <Info />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}